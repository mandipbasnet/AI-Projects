# Chatbot with Intent Detection Using Naive Bayes Classifier

## Overview
This Python script creates a simple chatbot that uses machine learning to detect user intents and respond accordingly. 
It employs a Naive Bayes classifier with a Count Vectorizer to handle text-based inputs and classify them into predefined intents.

---

## Libraries Used
- `nltk`: Natural Language Toolkit for text processing.
- `pandas`: Data handling and manipulation.
- `numpy`: Numerical operations.
- `sklearn`: Machine learning library used for Count Vectorization, model creation, and evaluation.

---

## Setup and Data Preparation

```python
import nltk
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

nltk.download('punkt')
```
- Import necessary libraries.
- Download 'punkt' from NLTK, used for tokenization.

### Dataset Creation
```python
data = {
    'Question': [...],  # List of questions
    'Intent': [...]      # Corresponding intents
}
df = pd.DataFrame(data)
```
- Creates a DataFrame with two columns:
  - **Question**: User inputs.
  - **Intent**: Categories corresponding to each question.

### Encode Intents
```python
encoder = LabelEncoder()
df['Intent'] = encoder.fit_transform(df['Intent'])
```
- Converts string labels into numeric format to be used by the classifier.

### Train/Test Split
```python
X_train, X_test, y_train, y_test = train_test_split(df['Question'], df['Intent'], test_size=0.2, random_state=42)
```
- Splits the dataset into training and testing sets (80/20 split).

---

## Model Creation and Training

```python
model = make_pipeline(CountVectorizer(), MultinomialNB())
model.fit(X_train, y_train)
```
- **CountVectorizer**: Transforms text data into a matrix of token counts.
- **MultinomialNB**: Naive Bayes classifier suitable for text classification.
- The pipeline streamlines vectorization and model training.

### Model Evaluation
```python
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
```
- Tests the model and prints the accuracy.

---

## Intent Prediction Function

```python
def get_intent(user_input):
    intent = model.predict([user_input])[0]
    return encoder.inverse_transform([intent])[0]
```
- Predicts the intent of a given user input.
- Uses the trained model and decodes the numeric prediction back into its original string label.

---

## Responses Dictionary

```python
responses = {
    'greeting': "Hello! How can I assist you?",
    'goodbye': "Goodbye! Have a great day!",
    'ai_explanation': "Artificial Intelligence (AI) is the simulation of human intelligence in machines that are programmed to think and learn.",
    'ml_explanation': "Machine Learning (ML) is a subset of AI that enables systems to learn from data and improve over time without being explicitly programmed.",
    'joke': "Why did the computer go to therapy? It had too many bytes of anxiety!",
    'bot_info': "I'm a simple chatbot created by Dan Zuchte! I'm here to answer your questions and make you smile.",
    'creator_info': "I was created by Dan Zuchte. They're pretty awesome, right?",
    'bot_capability': "I can answer questions, tell jokes, and help you learn about AI and machine learning. What would you like to know?",
    'python_explanation': "Python is a popular programming language known for its simplicity and versatility. It’s widely used in web development, data science, AI, and more.",
    'personal_question': "I don’t have personal preferences, but I’m here to help you with whatever you need!",
    'default': "I'm not sure about that. Can you rephrase your question?"
}
```
- Maps intents to predefined responses.
- A default response is provided for unknown inputs.

---

## Chatbot Interaction Loop

```python
print("Chatbot: Hi! Ask me anything (type 'bye' to exit)")

while True:
    user_input = input("You: ").strip().lower()
    if user_input == 'bye':
        print("Chatbot:", responses['goodbye'])
        break
    intent = get_intent(user_input)
    response = responses.get(intent, "I'm not sure about that.")
    print("Chatbot:", response)
```
- Starts an interaction loop where:
  - The user enters a query.
  - The chatbot predicts the intent and retrieves the appropriate response.
  - The loop breaks when the user types 'bye'.

---

## Key Points
1. **Naive Bayes Classifier**: Works well with text classification due to its assumption of feature independence.
2. **Count Vectorization**: Converts text into numerical features, representing word frequency.
3. **Pipeline**: Combines vectorization and classification for cleaner code.
4. **Accuracy Check**: Measures how well the model performs on unseen data.
5. **Expandable**: New intents and responses can be added to improve performance.

---

## Possible Improvements
- Increase the dataset to cover more intents.
- Use advanced techniques like TF-IDF or word embeddings.
- Implement fallback mechanisms for better handling of unknown questions.
- Add more complex dialogue handling and memory.

---

## Conclusion
This code demonstrates a simple but effective approach to building a machine learning-based chatbot using a Naive Bayes classifier.
 It classifies user input into predefined intents and responds accordingly. With more data and improvements, it can evolve into a more sophisticated chatbot.

---


